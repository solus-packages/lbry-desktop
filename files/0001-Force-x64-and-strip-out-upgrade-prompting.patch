From 7653627aad32a3217c7b16618258bb0eea5cbdb5 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <joshua@streambits.io>
Date: Thu, 5 Sep 2019 06:57:46 +0300
Subject: [PATCH 1/1] Force x64 and strip out upgrade prompting.

---
 package.json                                  |   5 +-
 src/ui/component/page/view.jsx                |   9 -
 src/ui/component/splash/view.jsx              |   3 -
 src/ui/index.jsx                              |   6 +-
 src/ui/modal/modalAutoUpdateConfirm/index.js  |   3 +-
 .../modal/modalAutoUpdateDownloaded/index.js  |   3 +-
 src/ui/modal/modalDownloading/index.js        |   4 +-
 src/ui/modal/modalRouter/view.jsx             |   5 -
 src/ui/redux/actions/app.js                   | 212 ------------------
 src/ui/redux/selectors/app.js                 |   5 -
 10 files changed, 7 insertions(+), 248 deletions(-)

diff --git a/package.json b/package.json
index 59bf92ce..71ccd225 100644
--- a/package.json
+++ b/package.json
@@ -31,15 +31,16 @@
     "run:web": "cross-env NODE_ENV=production yarn compile:web && node ./dist/web/server.js",
     "pack": "electron-builder --dir",
     "dist": "electron-builder",
-    "build": "cross-env NODE_ENV=production yarn compile:electron && electron-builder build",
+    "build": "cross-env NODE_ENV=production yarn compile:electron && electron-builder build--arch=x64",
     "build:dir": "yarn build -- --dir -c.compression=store -c.mac.identity=null",
+    "release": "yarn compile && electron-builder build",
     "lint": "eslint 'src/**/*.{js,jsx}' --fix && flow",
     "format": "prettier 'src/**/*.{js,jsx,scss,json}' --write",
     "flow-defs": "flow-typed install",
     "precommit": "lint-staged",
     "preinstall": "yarn cache clean lbry-redux && yarn cache clean lbryinc",
     "postinstall": "if-env NODE_ENV=production && yarn postinstall:warning || if-env APP_ENV=web && echo 'Done installing deps' || yarn postinstall:electron",
-    "postinstall:electron": "electron-builder install-app-deps && node ./build/downloadDaemon.js",
+    "postinstall:electron": "electron-builder install-app-deps --arch=x64 && node build/downloadDaemon.js",
     "postinstall:warning": "echo '\n\nWARNING\n\nNot all node modules were installed because NODE_ENV is set to \"production\".\nThis should only be set after installing dependencies with \"yarn\". The app will not work.\n\n'"
   },
   "dependencies": {
diff --git a/src/ui/component/page/view.jsx b/src/ui/component/page/view.jsx
index 4a309fdc..ca2cda3f 100644
--- a/src/ui/component/page/view.jsx
+++ b/src/ui/component/page/view.jsx
@@ -14,18 +14,9 @@ type Props = {
 
 function Page(props: Props) {
   const { children, className, autoUpdateDownloaded, isUpgradeAvailable, doDownloadUpgradeRequested } = props;
-  const showUpgradeButton = autoUpdateDownloaded || (process.platform === 'linux' && isUpgradeAvailable);
 
   return (
     <main className={classnames('main', className)}>
-      {/* @if TARGET='app' */}
-      {showUpgradeButton && (
-        <div className="main__status">
-          {__('Upgrade is ready')}
-          <Button button="alt" icon={ICONS.DOWNLOAD} label={__('Install now')} onClick={doDownloadUpgradeRequested} />
-        </div>
-      )}
-      {/* @endif */}
       {children}
     </main>
   );
diff --git a/src/ui/component/splash/view.jsx b/src/ui/component/splash/view.jsx
index b8bfc4c6..1941cbc2 100644
--- a/src/ui/component/splash/view.jsx
+++ b/src/ui/component/splash/view.jsx
@@ -6,7 +6,6 @@ import { Lbry } from 'lbry-redux';
 import Button from 'component/button';
 import ModalWalletUnlock from 'modal/modalWalletUnlock';
 import ModalIncompatibleDaemon from 'modal/modalIncompatibleDaemon';
-import ModalUpgrade from 'modal/modalUpgrade';
 import ModalDownloading from 'modal/modalDownloading';
 import 'css-doodle';
 
@@ -207,8 +206,6 @@ export default class SplashScreen extends React.PureComponent<Props, State> {
         return <ModalIncompatibleDaemon onContinueAnyway={this.runWithIncompatibleDaemon} />;
       case MODALS.WALLET_UNLOCK:
         return <ModalWalletUnlock />;
-      case MODALS.UPGRADE:
-        return <ModalUpgrade />;
       case MODALS.DOWNLOADING:
         return <ModalDownloading />;
       default:
diff --git a/src/ui/index.jsx b/src/ui/index.jsx
index c7c62822..ef93ab0b 100644
--- a/src/ui/index.jsx
+++ b/src/ui/index.jsx
@@ -11,7 +11,7 @@ import * as MODALS from 'constants/modal_types';
 import React, { useState, useEffect } from 'react';
 import ReactDOM from 'react-dom';
 import { Provider } from 'react-redux';
-import { doConditionalAuthNavigate, doDaemonReady, doAutoUpdate, doOpenModal, doHideModal } from 'redux/actions/app';
+import { doConditionalAuthNavigate, doDaemonReady, doOpenModal, doHideModal } from 'redux/actions/app';
 import { Lbry, doToast, isURIValid, setSearchApi } from 'lbry-redux';
 import { doInitLanguage, doUpdateIsNightAsync } from 'redux/actions/settings';
 import {
@@ -216,10 +216,6 @@ function AppWrapper() {
       autoUpdater.on('update-not-available', () => {
         console.log('Update not available'); // eslint-disable-line no-console
       });
-      autoUpdater.on('update-downloaded', () => {
-        console.log('Update downloaded'); // eslint-disable-line no-console
-        app.store.dispatch(doAutoUpdate());
-      });
     }
     // @endif
   }, []);
diff --git a/src/ui/modal/modalAutoUpdateConfirm/index.js b/src/ui/modal/modalAutoUpdateConfirm/index.js
index 91aa1d01..49c2f5f1 100644
--- a/src/ui/modal/modalAutoUpdateConfirm/index.js
+++ b/src/ui/modal/modalAutoUpdateConfirm/index.js
@@ -1,10 +1,9 @@
 import { connect } from 'react-redux';
-import { doAutoUpdateDeclined, doHideModal } from 'redux/actions/app';
+import { doHideModal } from 'redux/actions/app';
 import ModalAutoUpdateConfirm from './view';
 
 const perform = dispatch => ({
   closeModal: () => dispatch(doHideModal()),
-  declineAutoUpdate: () => dispatch(doAutoUpdateDeclined()),
 });
 
 export default connect(
diff --git a/src/ui/modal/modalAutoUpdateDownloaded/index.js b/src/ui/modal/modalAutoUpdateDownloaded/index.js
index afe8e8fa..504e06db 100644
--- a/src/ui/modal/modalAutoUpdateDownloaded/index.js
+++ b/src/ui/modal/modalAutoUpdateDownloaded/index.js
@@ -1,10 +1,9 @@
 import { connect } from 'react-redux';
-import { doAutoUpdateDeclined, doHideModal } from 'redux/actions/app';
+import { doHideModal } from 'redux/actions/app';
 import ModalAutoUpdateDownloaded from './view';
 
 const perform = dispatch => ({
   closeModal: () => dispatch(doHideModal()),
-  declineAutoUpdate: () => dispatch(doAutoUpdateDeclined()),
 });
 
 export default connect(
diff --git a/src/ui/modal/modalDownloading/index.js b/src/ui/modal/modalDownloading/index.js
index 1a06ee04..eaf3396e 100644
--- a/src/ui/modal/modalDownloading/index.js
+++ b/src/ui/modal/modalDownloading/index.js
@@ -1,5 +1,5 @@
 import { connect } from 'react-redux';
-import { doStartUpgrade, doCancelUpgrade, doHideModal } from 'redux/actions/app';
+import { doHideModal } from 'redux/actions/app';
 import { selectDownloadProgress, selectDownloadComplete, selectUpgradeDownloadPath } from 'redux/selectors/app';
 import ModalDownloading from './view';
 
@@ -10,10 +10,8 @@ const select = state => ({
 });
 
 const perform = dispatch => ({
-  startUpgrade: () => dispatch(doStartUpgrade()),
   cancelUpgrade: () => {
     dispatch(doHideModal());
-    dispatch(doCancelUpgrade());
   },
 });
 
diff --git a/src/ui/modal/modalRouter/view.jsx b/src/ui/modal/modalRouter/view.jsx
index af910c61..88777c3f 100644
--- a/src/ui/modal/modalRouter/view.jsx
+++ b/src/ui/modal/modalRouter/view.jsx
@@ -7,7 +7,6 @@ import ModalDownloading from 'modal/modalDownloading';
 import ModalAutoGenerateThumbnail from 'modal/modalAutoGenerateThumbnail';
 import ModalAutoUpdateDownloaded from 'modal/modalAutoUpdateDownloaded';
 import ModalAutoUpdateConfirm from 'modal/modalAutoUpdateConfirm';
-import ModalUpgrade from 'modal/modalUpgrade';
 import ModalWelcome from 'modal/modalWelcome';
 import ModalFirstReward from 'modal/modalFirstReward';
 import ModalRewardApprovalRequired from 'modal/modalRewardApprovalRequired';
@@ -48,14 +47,10 @@ function ModalRouter(props: Props) {
   const { id, modalProps } = modal;
 
   switch (id) {
-    case MODALS.UPGRADE:
-      return <ModalUpgrade {...modalProps} />;
     case MODALS.DOWNLOADING:
       return <ModalDownloading {...modalProps} />;
     case MODALS.AUTO_GENERATE_THUMBNAIL:
       return <ModalAutoGenerateThumbnail {...modalProps} />;
-    case MODALS.AUTO_UPDATE_DOWNLOADED:
-      return <ModalAutoUpdateDownloaded {...modalProps} />;
     case MODALS.AUTO_UPDATE_CONFIRM:
       return <ModalAutoUpdateConfirm {...modalProps} />;
     case MODALS.ERROR:
diff --git a/src/ui/redux/actions/app.js b/src/ui/redux/actions/app.js
index ee511492..a936d382 100644
--- a/src/ui/redux/actions/app.js
+++ b/src/ui/redux/actions/app.js
@@ -18,7 +18,6 @@ import Native from 'native';
 import { doFetchDaemonSettings } from 'redux/actions/settings';
 import { doCheckSubscriptionsInit } from 'redux/actions/subscriptions';
 import {
-  selectIsUpgradeSkipped,
   selectUpdateUrl,
   selectUpgradeDownloadItem,
   selectUpgradeDownloadPath,
@@ -39,8 +38,6 @@ const { download } = remote.require('electron-dl');
 const Fs = remote.require('fs');
 // @endif
 
-const CHECK_UPGRADE_INTERVAL = 10 * 60 * 1000;
-
 export function doOpenModal(id, modalProps = {}) {
   return {
     type: ACTIONS.SHOW_MODAL,
@@ -57,211 +54,6 @@ export function doHideModal() {
   };
 }
 
-export function doUpdateDownloadProgress(percent) {
-  return {
-    type: ACTIONS.UPGRADE_DOWNLOAD_PROGRESSED,
-    data: {
-      percent,
-    },
-  };
-}
-
-export function doSkipUpgrade() {
-  return {
-    type: ACTIONS.SKIP_UPGRADE,
-  };
-}
-
-export function doStartUpgrade() {
-  return (dispatch, getState) => {
-    const state = getState();
-    const upgradeDownloadPath = selectUpgradeDownloadPath(state);
-
-    ipcRenderer.send('upgrade', upgradeDownloadPath);
-  };
-}
-
-export function doDownloadUpgrade() {
-  return (dispatch, getState) => {
-    // @if TARGET='app'
-    const state = getState();
-    // Make a new directory within temp directory so the filename is guaranteed to be available
-    const dir = Fs.mkdtempSync(remote.app.getPath('temp') + path.sep);
-    const upgradeFilename = selectUpgradeFilename(state);
-
-    const options = {
-      onProgress: p => dispatch(doUpdateDownloadProgress(Math.round(p * 100))),
-      directory: dir,
-    };
-    download(remote.getCurrentWindow(), selectUpdateUrl(state), options).then(downloadItem => {
-      /**
-       * TODO: get the download path directly from the download object. It should just be
-       * downloadItem.getSavePath(), but the copy on the main process is being garbage collected
-       * too soon.
-       */
-
-      dispatch({
-        type: ACTIONS.UPGRADE_DOWNLOAD_COMPLETED,
-        data: {
-          downloadItem,
-          path: path.join(dir, upgradeFilename),
-        },
-      });
-    });
-
-    dispatch({
-      type: ACTIONS.UPGRADE_DOWNLOAD_STARTED,
-    });
-    dispatch(doHideModal());
-    dispatch(doOpenModal(MODALS.DOWNLOADING));
-    // @endif
-  };
-}
-
-export function doDownloadUpgradeRequested() {
-  // This means the user requested an upgrade by clicking the "upgrade" button in the navbar.
-  // If on Mac and Windows, we do some new behavior for the auto-update system.
-  // This will probably be reorganized once we get auto-update going on Linux and remove
-  // the old logic.
-
-  return (dispatch, getState) => {
-    const state = getState();
-
-    const autoUpdateDeclined = selectAutoUpdateDeclined(state);
-
-    if (['win32', 'darwin'].includes(process.platform)) {
-      // electron-updater behavior
-      if (autoUpdateDeclined) {
-        // The user declined an update before, so show the "confirm" dialog
-        dispatch(doOpenModal(MODALS.AUTO_UPDATE_CONFIRM));
-      } else {
-        // The user was never shown the original update dialog (e.g. because they were
-        // watching a video). So show the inital "update downloaded" dialog.
-        dispatch(doOpenModal(MODALS.AUTO_UPDATE_DOWNLOADED));
-      }
-    } else {
-      // Old behavior for Linux
-      dispatch(doDownloadUpgrade());
-    }
-  };
-}
-
-export function doClearUpgradeTimer() {
-  return (dispatch, getState) => {
-    const state = getState();
-
-    if (selectUpgradeTimer(state)) {
-      clearInterval(selectUpgradeTimer(state));
-      dispatch({
-        type: ACTIONS.CLEAR_UPGRADE_TIMER,
-      });
-    }
-  };
-}
-
-export function doAutoUpdate() {
-  return dispatch => {
-    dispatch({
-      type: ACTIONS.AUTO_UPDATE_DOWNLOADED,
-    });
-
-    dispatch(doOpenModal(MODALS.AUTO_UPDATE_DOWNLOADED));
-
-    dispatch(doClearUpgradeTimer());
-  };
-}
-
-export function doAutoUpdateDeclined() {
-  return dispatch => {
-    dispatch(doClearUpgradeTimer());
-
-    dispatch({
-      type: ACTIONS.AUTO_UPDATE_DECLINED,
-    });
-  };
-}
-
-export function doCancelUpgrade() {
-  return (dispatch, getState) => {
-    const state = getState();
-    const upgradeDownloadItem = selectUpgradeDownloadItem(state);
-
-    if (upgradeDownloadItem) {
-      /*
-       * Right now the remote reference to the download item gets garbage collected as soon as the
-       * the download is over (maybe even earlier), so trying to cancel a finished download may
-       * throw an error.
-       */
-      try {
-        upgradeDownloadItem.cancel();
-      } catch (err) {
-        console.error(err); // eslint-disable-line no-console
-      }
-    }
-
-    dispatch({ type: ACTIONS.UPGRADE_CANCELLED });
-  };
-}
-
-export function doCheckUpgradeAvailable() {
-  return (dispatch, getState) => {
-    const state = getState();
-    dispatch({
-      type: ACTIONS.CHECK_UPGRADE_START,
-    });
-
-    if (['win32', 'darwin'].includes(process.platform)) {
-      // On Windows and Mac, updates happen silently through
-      // electron-updater.
-      const autoUpdateDeclined = selectAutoUpdateDeclined(state);
-
-      if (!autoUpdateDeclined && !isDev) {
-        autoUpdater.checkForUpdates();
-      }
-      return;
-    }
-
-    const success = ({ remoteVersion, upgradeAvailable }) => {
-      dispatch({
-        type: ACTIONS.CHECK_UPGRADE_SUCCESS,
-        data: {
-          upgradeAvailable,
-          remoteVersion,
-        },
-      });
-
-      if (
-        upgradeAvailable &&
-        !selectModal(state) &&
-        (!selectIsUpgradeSkipped(state) || remoteVersion !== selectRemoteVersion(state))
-      ) {
-        dispatch(doOpenModal(MODALS.UPGRADE));
-      }
-    };
-
-    const fail = () => {
-      dispatch({
-        type: ACTIONS.CHECK_UPGRADE_FAIL,
-      });
-    };
-
-    Native.getAppVersionInfo().then(success, fail);
-  };
-}
-
-/*
-  Initiate a timer that will check for an app upgrade every 10 minutes.
- */
-export function doCheckUpgradeSubscribe() {
-  return dispatch => {
-    const checkUpgradeTimer = setInterval(() => dispatch(doCheckUpgradeAvailable()), CHECK_UPGRADE_INTERVAL);
-    dispatch({
-      type: ACTIONS.CHECK_UPGRADE_SUBSCRIBE,
-      data: { checkUpgradeTimer },
-    });
-  };
-}
-
 export function doCheckDaemonVersion() {
   return dispatch => {
     // @if TARGET='app'
@@ -324,10 +116,6 @@ export function doDaemonReady() {
     dispatch(doFetchDaemonSettings());
     dispatch(doBalanceSubscribe());
     dispatch(doFetchFileInfosAndPublishedClaims());
-    if (!selectIsUpgradeSkipped(state)) {
-      dispatch(doCheckUpgradeAvailable());
-    }
-    dispatch(doCheckUpgradeSubscribe());
     dispatch(doCheckSubscriptionsInit());
     // @endif
   };
diff --git a/src/ui/redux/selectors/app.js b/src/ui/redux/selectors/app.js
index 6127e263..37b05baf 100644
--- a/src/ui/redux/selectors/app.js
+++ b/src/ui/redux/selectors/app.js
@@ -65,11 +65,6 @@ export const selectDownloadComplete = createSelector(
   state => state.upgradeDownloadCompleted
 );
 
-export const selectIsUpgradeSkipped = createSelector(
-  selectState,
-  state => state.isUpgradeSkipped
-);
-
 export const selectUpgradeDownloadPath = createSelector(
   selectState,
   state => state.downloadPath
-- 
2.23.0

