From 88c55926a8e5e23bf511383ef46cc519510b6a50 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <joshua@stroblindustries.com>
Date: Thu, 17 Jan 2019 09:45:44 +0200
Subject: [PATCH 1/1] Force x64 and strip out upgrade prompting.

---
 package.json                            |  5 +-
 src/renderer/component/header/view.jsx  | 13 -----
 src/renderer/component/splash/view.jsx  |  3 --
 src/renderer/modal/modalRouter/view.jsx |  3 --
 src/renderer/redux/actions/app.js       | 66 -------------------------
 5 files changed, 3 insertions(+), 87 deletions(-)

diff --git a/package.json b/package.json
index 225a8cfd..f594c8d1 100644
--- a/package.json
+++ b/package.json
@@ -22,15 +22,16 @@
   "scripts": {
     "extract-langs": "node build/extractLocals.js",
     "compile": "electron-webpack && yarn extract-langs",
-    "build": "yarn compile && electron-builder build",
+    "build": "yarn compile && electron-builder build --arch=x64",
     "build:dir": "yarn build -- --dir -c.compression=store -c.mac.identity=null",
     "dev": "electron-webpack dev",
     "lint": "eslint 'src/**/*.{js,jsx}' --fix && flow",
     "format": "prettier 'src/**/*.{js,jsx,scss,json}' --write",
     "flow-defs": "flow-typed install",
+    "release": "yarn compile && electron-builder build",
     "precommit": "lint-staged",
     "preinstall": "yarn cache clean lbry-redux && yarn cache clean lbryinc",
-    "postinstall": "electron-builder install-app-deps && node build/downloadDaemon.js"
+    "postinstall": "electron-builder install-app-deps --arch=x64 & node build/downloadDaemon.js"
   },
   "dependencies": {
     "@types/three": "^0.93.1",
diff --git a/src/renderer/component/header/view.jsx b/src/renderer/component/header/view.jsx
index 8bdbdef3..7828dec0 100644
--- a/src/renderer/component/header/view.jsx
+++ b/src/renderer/component/header/view.jsx
@@ -32,9 +32,6 @@ const Header = (props: Props) => {
     isForwardDisabled,
   } = props;
 
-  const showUpgradeButton =
-    autoUpdateDownloaded || (process.platform === 'linux' && isUpgradeAvailable);
-
   return (
     <header className="header">
       <div className="header__navigation">
@@ -100,16 +97,6 @@ const Header = (props: Props) => {
           label={isUpgradeAvailable ? '' : __('Publish')}
           onClick={() => navigate('/publish')}
         />
-
-        {showUpgradeButton && (
-          <Button
-            className="header__navigation-item header__navigation-item--right-action"
-            icon={ICONS.DOWNLOAD}
-            iconSize={24}
-            label={__('Upgrade App')}
-            onClick={downloadUpgradeRequested}
-          />
-        )}
       </div>
     </header>
   );
diff --git a/src/renderer/component/splash/view.jsx b/src/renderer/component/splash/view.jsx
index 95c47fe1..03b91e11 100644
--- a/src/renderer/component/splash/view.jsx
+++ b/src/renderer/component/splash/view.jsx
@@ -5,7 +5,6 @@ import * as MODALS from 'constants/modal_types';
 import { Lbry } from 'lbry-redux';
 import ModalWalletUnlock from 'modal/modalWalletUnlock';
 import ModalIncompatibleDaemon from 'modal/modalIncompatibleDaemon';
-import ModalUpgrade from 'modal/modalUpgrade';
 import ModalDownloading from 'modal/modalDownloading';
 import LoadScreen from './internal/load-screen';
 
@@ -202,8 +201,6 @@ export default class SplashScreen extends React.PureComponent<Props, State> {
         return <ModalIncompatibleDaemon onContinueAnyway={this.runWithIncompatibleDaemon} />;
       case MODALS.WALLET_UNLOCK:
         return <ModalWalletUnlock />;
-      case MODALS.UPGRADE:
-        return <ModalUpgrade />;
       case MODALS.DOWNLOADING:
         return <ModalDownloading />;
       default:
diff --git a/src/renderer/modal/modalRouter/view.jsx b/src/renderer/modal/modalRouter/view.jsx
index 27210171..ffab809a 100644
--- a/src/renderer/modal/modalRouter/view.jsx
+++ b/src/renderer/modal/modalRouter/view.jsx
@@ -6,7 +6,6 @@ import ModalAuthFailure from 'modal/modalAuthFailure';
 import ModalDownloading from 'modal/modalDownloading';
 import ModalAutoUpdateDownloaded from 'modal/modalAutoUpdateDownloaded';
 import ModalAutoUpdateConfirm from 'modal/modalAutoUpdateConfirm';
-import ModalUpgrade from 'modal/modalUpgrade';
 import ModalWelcome from 'modal/modalWelcome';
 import ModalFirstReward from 'modal/modalFirstReward';
 import ModalRewardApprovalRequired from 'modal/modalRewardApprovalRequired';
@@ -153,8 +152,6 @@ class ModalRouter extends React.PureComponent<Props, State> {
     const { id, modalProps } = modal;
 
     switch (id) {
-      case MODALS.UPGRADE:
-        return <ModalUpgrade {...modalProps} />;
       case MODALS.DOWNLOADING:
         return <ModalDownloading {...modalProps} />;
       case MODALS.AUTO_UPDATE_DOWNLOADED:
diff --git a/src/renderer/redux/actions/app.js b/src/renderer/redux/actions/app.js
index 82f77089..1ee9f940 100644
--- a/src/renderer/redux/actions/app.js
+++ b/src/renderer/redux/actions/app.js
@@ -191,68 +191,6 @@ export function doCancelUpgrade() {
   };
 }
 
-export function doCheckUpgradeAvailable() {
-  return (dispatch, getState) => {
-    const state = getState();
-    dispatch({
-      type: ACTIONS.CHECK_UPGRADE_START,
-    });
-
-    if (['win32', 'darwin'].includes(process.platform)) {
-      // On Windows and Mac, updates happen silently through
-      // electron-updater.
-      const autoUpdateDeclined = selectAutoUpdateDeclined(state);
-
-      if (!autoUpdateDeclined && !isDev) {
-        autoUpdater.checkForUpdates();
-      }
-      return;
-    }
-
-    const success = ({ remoteVersion, upgradeAvailable }) => {
-      dispatch({
-        type: ACTIONS.CHECK_UPGRADE_SUCCESS,
-        data: {
-          upgradeAvailable,
-          remoteVersion,
-        },
-      });
-
-      if (
-        upgradeAvailable &&
-        !selectModal(state) &&
-        (!selectIsUpgradeSkipped(state) || remoteVersion !== selectRemoteVersion(state))
-      ) {
-        dispatch(doOpenModal(MODALS.UPGRADE));
-      }
-    };
-
-    const fail = () => {
-      dispatch({
-        type: ACTIONS.CHECK_UPGRADE_FAIL,
-      });
-    };
-
-    Native.getAppVersionInfo().then(success, fail);
-  };
-}
-
-/*
-  Initiate a timer that will check for an app upgrade every 10 minutes.
- */
-export function doCheckUpgradeSubscribe() {
-  return dispatch => {
-    const checkUpgradeTimer = setInterval(
-      () => dispatch(doCheckUpgradeAvailable()),
-      CHECK_UPGRADE_INTERVAL
-    );
-    dispatch({
-      type: ACTIONS.CHECK_UPGRADE_SUBSCRIBE,
-      data: { checkUpgradeTimer },
-    });
-  };
-}
-
 export function doCheckDaemonVersion() {
   return dispatch => {
     Lbry.version().then(({ lbrynet_version: lbrynetVersion }) => {
@@ -306,10 +244,6 @@ export function doDaemonReady() {
     dispatch(doFetchDaemonSettings());
     dispatch(doBalanceSubscribe());
     dispatch(doFetchFileInfosAndPublishedClaims());
-    if (!selectIsUpgradeSkipped(state)) {
-      dispatch(doCheckUpgradeAvailable());
-    }
-    dispatch(doCheckUpgradeSubscribe());
     dispatch(doCheckSubscriptionsInit());
   };
 }
-- 
2.20.1

