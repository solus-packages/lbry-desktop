From 2aa0f03989329432415f5ca42fba245d089c2ad2 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <joshua@streambits.io>
Date: Fri, 18 Oct 2019 13:32:40 +0300
Subject: [PATCH 1/1] Force x64 and strip out upgrade prompting.

---
 package.json                                  |   5 +-
 src/ui/component/app/index.js                 |   3 +-
 src/ui/component/app/view.jsx                 |  15 --
 src/ui/component/splash/view.jsx              |   3 -
 src/ui/constants/action_types.js              |   1 -
 src/ui/constants/modal_types.js               |   1 -
 src/ui/index.jsx                              |   3 +-
 .../modal/modalAutoUpdateDownloaded/index.js  |   3 +-
 src/ui/modal/modalDownloading/index.js        |   4 +-
 src/ui/modal/modalRouter/view.jsx             |   5 -
 src/ui/modal/modalUpgrade/index.js            |   8 +-
 src/ui/redux/actions/app.js                   | 192 ------------------
 src/ui/redux/reducers/app.js                  |   5 -
 src/ui/redux/selectors/app.js                 |   5 -
 14 files changed, 9 insertions(+), 244 deletions(-)

diff --git a/package.json b/package.json
index 7edb2d74..911a17b9 100644
--- a/package.json
+++ b/package.json
@@ -31,15 +31,16 @@
     "run:web": "cross-env NODE_ENV=production yarn compile:web && node ./dist/web/server.js",
     "pack": "electron-builder --dir",
     "dist": "electron-builder",
-    "build": "cross-env NODE_ENV=production yarn compile:electron && electron-builder build",
+    "build": "cross-env NODE_ENV=production yarn compile:electron && electron-builder build--arch=x64",
     "build:dir": "yarn build -- --dir -c.compression=store -c.mac.identity=null",
+    "release": "yarn compile && electron-builder build",
     "lint": "eslint 'src/**/*.{js,jsx}' --fix && flow",
     "format": "prettier 'src/**/*.{js,jsx,scss,json}' --write",
     "flow-defs": "flow-typed install",
     "precommit": "lint-staged",
     "preinstall": "yarn cache clean lbry-redux && yarn cache clean lbryinc",
     "postinstall": "if-env NODE_ENV=production && yarn postinstall:warning || if-env APP_ENV=web && echo 'Done installing deps' || yarn postinstall:electron",
-    "postinstall:electron": "electron-builder install-app-deps && node ./build/downloadDaemon.js",
+    "postinstall:electron": "electron-builder install-app-deps --arch=x64 && node build/downloadDaemon.js",
     "postinstall:warning": "echo '\n\nWARNING\n\nNot all node modules were installed because NODE_ENV is set to \"production\".\nThis should only be set after installing dependencies with \"yarn\". The app will not work.\n\n'"
   },
   "dependencies": {
diff --git a/src/ui/component/app/index.js b/src/ui/component/app/index.js
index 9971c30b..d7cc32f0 100644
--- a/src/ui/component/app/index.js
+++ b/src/ui/component/app/index.js
@@ -5,7 +5,7 @@ import { selectUser, doRewardList, doFetchRewardedContent, doFetchAccessToken, s
 import { doFetchTransactions, doFetchChannelListMine, selectBalance } from 'lbry-redux';
 import { makeSelectClientSetting, selectThemePath } from 'redux/selectors/settings';
 import { selectIsUpgradeAvailable, selectAutoUpdateDownloaded } from 'redux/selectors/app';
-import { doDownloadUpgradeRequested, doSignIn, doSyncWithPreferences } from 'redux/actions/app';
+import { doSignIn, doSyncWithPreferences } from 'redux/actions/app';
 import { doSetClientSetting } from 'redux/actions/settings';
 import App from './view';
 
@@ -27,7 +27,6 @@ const perform = dispatch => ({
   fetchAccessToken: () => dispatch(doFetchAccessToken()),
   fetchChannelListMine: () => dispatch(doFetchChannelListMine()),
   signIn: () => dispatch(doSignIn()),
-  requestDownloadUpgrade: () => dispatch(doDownloadUpgradeRequested()),
   checkSync: () => dispatch(doSyncWithPreferences()),
   setSyncEnabled: value => dispatch(doSetClientSetting(SETTINGS.ENABLE_SYNC, value)),
 });
diff --git a/src/ui/component/app/view.jsx b/src/ui/component/app/view.jsx
index bf5bd13b..6dffd8cd 100644
--- a/src/ui/component/app/view.jsx
+++ b/src/ui/component/app/view.jsx
@@ -80,7 +80,6 @@ function App(props: Props) {
   const previousHasVerifiedEmail = usePrevious(hasVerifiedEmail);
   const previousRewardApproved = usePrevious(isRewardApproved);
   const { pathname, hash } = props.location;
-  const showUpgradeButton = autoUpdateDownloaded || (process.platform === 'linux' && isUpgradeAvailable);
 
   let uri;
   try {
@@ -201,20 +200,6 @@ function App(props: Props) {
       <ModalRouter />
       <FileViewer pageUri={uri} />
 
-      {/* @if TARGET='app' */}
-      {showUpgradeButton && (
-        <div className="snack-bar--upgrade">
-          {__('Upgrade is ready')}
-          <Button
-            className="snack-bar__action"
-            button="alt"
-            icon={ICONS.DOWNLOAD}
-            label={__('Install now')}
-            onClick={requestDownloadUpgrade}
-          />
-        </div>
-      )}
-      {/* @endif */}
       {isEnhancedLayout && <Yrbl className="yrbl--enhanced" />}
     </div>
   );
diff --git a/src/ui/component/splash/view.jsx b/src/ui/component/splash/view.jsx
index 8f901b7c..59ec629e 100644
--- a/src/ui/component/splash/view.jsx
+++ b/src/ui/component/splash/view.jsx
@@ -6,7 +6,6 @@ import { Lbry } from 'lbry-redux';
 import Button from 'component/button';
 import ModalWalletUnlock from 'modal/modalWalletUnlock';
 import ModalIncompatibleDaemon from 'modal/modalIncompatibleDaemon';
-import ModalUpgrade from 'modal/modalUpgrade';
 import ModalDownloading from 'modal/modalDownloading';
 import 'css-doodle';
 
@@ -206,8 +205,6 @@ export default class SplashScreen extends React.PureComponent<Props, State> {
         return <ModalIncompatibleDaemon onContinueAnyway={this.runWithIncompatibleDaemon} />;
       case MODALS.WALLET_UNLOCK:
         return <ModalWalletUnlock />;
-      case MODALS.UPGRADE:
-        return <ModalUpgrade />;
       case MODALS.DOWNLOADING:
         return <ModalDownloading />;
       default:
diff --git a/src/ui/constants/action_types.js b/src/ui/constants/action_types.js
index c1e60b47..911036e5 100644
--- a/src/ui/constants/action_types.js
+++ b/src/ui/constants/action_types.js
@@ -42,7 +42,6 @@ export const UPDATE_REMOTE_VERSION = 'UPDATE_REMOTE_VERSION';
 export const SKIP_UPGRADE = 'SKIP_UPGRADE';
 export const START_UPGRADE = 'START_UPGRADE';
 export const AUTO_UPDATE_DECLINED = 'AUTO_UPDATE_DECLINED';
-export const AUTO_UPDATE_DOWNLOADED = 'AUTO_UPDATE_DOWNLOADED';
 export const CLEAR_UPGRADE_TIMER = 'CLEAR_UPGRADE_TIMER';
 
 // Wallet
diff --git a/src/ui/constants/modal_types.js b/src/ui/constants/modal_types.js
index c5e1ef8e..f7f29f4d 100644
--- a/src/ui/constants/modal_types.js
+++ b/src/ui/constants/modal_types.js
@@ -4,7 +4,6 @@ export const INCOMPATIBLE_DAEMON = 'incompatible_daemon';
 export const FILE_TIMEOUT = 'file_timeout';
 export const DOWNLOADING = 'downloading';
 export const AUTO_GENERATE_THUMBNAIL = 'auto_generate_thumbnail';
-export const AUTO_UPDATE_DOWNLOADED = 'auto_update_downloaded';
 export const ERROR = 'error';
 export const UPGRADE = 'upgrade';
 export const WELCOME = 'welcome';
diff --git a/src/ui/index.jsx b/src/ui/index.jsx
index 02d54d0a..f4fe3b45 100644
--- a/src/ui/index.jsx
+++ b/src/ui/index.jsx
@@ -11,7 +11,7 @@ import * as MODALS from 'constants/modal_types';
 import React, { Fragment, useState, useEffect } from 'react';
 import ReactDOM from 'react-dom';
 import { Provider } from 'react-redux';
-import { doConditionalAuthNavigate, doDaemonReady, doAutoUpdate, doOpenModal, doHideModal } from 'redux/actions/app';
+import { doConditionalAuthNavigate, doDaemonReady, doOpenModal, doHideModal } from 'redux/actions/app';
 import { Lbry, doToast, isURIValid, setSearchApi } from 'lbry-redux';
 import { doUpdateIsNightAsync } from 'redux/actions/settings';
 import {
@@ -213,7 +213,6 @@ function AppWrapper() {
       });
       autoUpdater.on('update-downloaded', () => {
         console.log('Update downloaded'); // eslint-disable-line no-console
-        app.store.dispatch(doAutoUpdate());
       });
     }
     // @endif
diff --git a/src/ui/modal/modalAutoUpdateDownloaded/index.js b/src/ui/modal/modalAutoUpdateDownloaded/index.js
index afe8e8fa..504e06db 100644
--- a/src/ui/modal/modalAutoUpdateDownloaded/index.js
+++ b/src/ui/modal/modalAutoUpdateDownloaded/index.js
@@ -1,10 +1,9 @@
 import { connect } from 'react-redux';
-import { doAutoUpdateDeclined, doHideModal } from 'redux/actions/app';
+import { doHideModal } from 'redux/actions/app';
 import ModalAutoUpdateDownloaded from './view';
 
 const perform = dispatch => ({
   closeModal: () => dispatch(doHideModal()),
-  declineAutoUpdate: () => dispatch(doAutoUpdateDeclined()),
 });
 
 export default connect(
diff --git a/src/ui/modal/modalDownloading/index.js b/src/ui/modal/modalDownloading/index.js
index 1a06ee04..eaf3396e 100644
--- a/src/ui/modal/modalDownloading/index.js
+++ b/src/ui/modal/modalDownloading/index.js
@@ -1,5 +1,5 @@
 import { connect } from 'react-redux';
-import { doStartUpgrade, doCancelUpgrade, doHideModal } from 'redux/actions/app';
+import { doHideModal } from 'redux/actions/app';
 import { selectDownloadProgress, selectDownloadComplete, selectUpgradeDownloadPath } from 'redux/selectors/app';
 import ModalDownloading from './view';
 
@@ -10,10 +10,8 @@ const select = state => ({
 });
 
 const perform = dispatch => ({
-  startUpgrade: () => dispatch(doStartUpgrade()),
   cancelUpgrade: () => {
     dispatch(doHideModal());
-    dispatch(doCancelUpgrade());
   },
 });
 
diff --git a/src/ui/modal/modalRouter/view.jsx b/src/ui/modal/modalRouter/view.jsx
index 10c87acc..1fa0a424 100644
--- a/src/ui/modal/modalRouter/view.jsx
+++ b/src/ui/modal/modalRouter/view.jsx
@@ -5,7 +5,6 @@ import ModalError from 'modal/modalError';
 import ModalDownloading from 'modal/modalDownloading';
 import ModalAutoGenerateThumbnail from 'modal/modalAutoGenerateThumbnail';
 import ModalAutoUpdateDownloaded from 'modal/modalAutoUpdateDownloaded';
-import ModalUpgrade from 'modal/modalUpgrade';
 import ModalWelcome from 'modal/modalWelcome';
 import ModalFirstReward from 'modal/modalFirstReward';
 import ModalRemoveFile from 'modal/modalRemoveFile';
@@ -46,14 +45,10 @@ function ModalRouter(props: Props) {
   const { id, modalProps } = modal;
 
   switch (id) {
-    case MODALS.UPGRADE:
-      return <ModalUpgrade {...modalProps} />;
     case MODALS.DOWNLOADING:
       return <ModalDownloading {...modalProps} />;
     case MODALS.AUTO_GENERATE_THUMBNAIL:
       return <ModalAutoGenerateThumbnail {...modalProps} />;
-    case MODALS.AUTO_UPDATE_DOWNLOADED:
-      return <ModalAutoUpdateDownloaded {...modalProps} />;
     case MODALS.ERROR:
       return <ModalError {...modalProps} />;
     case MODALS.FILE_TIMEOUT:
diff --git a/src/ui/modal/modalUpgrade/index.js b/src/ui/modal/modalUpgrade/index.js
index f1b58121..18effcba 100644
--- a/src/ui/modal/modalUpgrade/index.js
+++ b/src/ui/modal/modalUpgrade/index.js
@@ -1,15 +1,11 @@
 import { connect } from 'react-redux';
-import { doDownloadUpgrade, doSkipUpgrade, doHideModal } from 'redux/actions/app';
+import { doHideModal } from 'redux/actions/app';
 import ModalUpgrade from './view';
 
 const select = () => ({});
 
 const perform = dispatch => ({
-  downloadUpgrade: () => dispatch(doDownloadUpgrade()),
-  skipUpgrade: () => {
-    dispatch(doHideModal());
-    dispatch(doSkipUpgrade());
-  },
+  doHideModal())
 });
 
 export default connect(
diff --git a/src/ui/redux/actions/app.js b/src/ui/redux/actions/app.js
index 96ee3946..9d979118 100644
--- a/src/ui/redux/actions/app.js
+++ b/src/ui/redux/actions/app.js
@@ -23,13 +23,9 @@ import {
 import Native from 'native';
 import { doFetchDaemonSettings } from 'redux/actions/settings';
 import {
-  selectIsUpgradeSkipped,
   selectUpdateUrl,
-  selectUpgradeDownloadItem,
   selectUpgradeDownloadPath,
   selectUpgradeFilename,
-  selectAutoUpdateDeclined,
-  selectRemoteVersion,
   selectUpgradeTimer,
   selectModal,
 } from 'redux/selectors/app';
@@ -40,13 +36,10 @@ import analytics from 'analytics';
 import { deleteAuthToken, getSavedPassword, getAuthToken } from 'util/saved-passwords';
 
 // @if TARGET='app'
-const { autoUpdater } = remote.require('electron-updater');
 const { download } = remote.require('electron-dl');
 const Fs = remote.require('fs');
 // @endif
 
-const CHECK_UPGRADE_INTERVAL = 10 * 60 * 1000;
-
 export function doOpenModal(id, modalProps = {}) {
   return {
     type: ACTIONS.SHOW_MODAL,
@@ -63,84 +56,6 @@ export function doHideModal() {
   };
 }
 
-export function doUpdateDownloadProgress(percent) {
-  return {
-    type: ACTIONS.UPGRADE_DOWNLOAD_PROGRESSED,
-    data: {
-      percent,
-    },
-  };
-}
-
-export function doSkipUpgrade() {
-  return {
-    type: ACTIONS.SKIP_UPGRADE,
-  };
-}
-
-export function doStartUpgrade() {
-  return (dispatch, getState) => {
-    const state = getState();
-    const upgradeDownloadPath = selectUpgradeDownloadPath(state);
-
-    ipcRenderer.send('upgrade', upgradeDownloadPath);
-  };
-}
-
-export function doDownloadUpgrade() {
-  return (dispatch, getState) => {
-    // @if TARGET='app'
-    const state = getState();
-    // Make a new directory within temp directory so the filename is guaranteed to be available
-    const dir = Fs.mkdtempSync(remote.app.getPath('temp') + path.sep);
-    const upgradeFilename = selectUpgradeFilename(state);
-
-    const options = {
-      onProgress: p => dispatch(doUpdateDownloadProgress(Math.round(p * 100))),
-      directory: dir,
-    };
-    download(remote.getCurrentWindow(), selectUpdateUrl(state), options).then(downloadItem => {
-      /**
-       * TODO: get the download path directly from the download object. It should just be
-       * downloadItem.getSavePath(), but the copy on the main process is being garbage collected
-       * too soon.
-       */
-
-      dispatch({
-        type: ACTIONS.UPGRADE_DOWNLOAD_COMPLETED,
-        data: {
-          downloadItem,
-          path: path.join(dir, upgradeFilename),
-        },
-      });
-    });
-
-    dispatch({
-      type: ACTIONS.UPGRADE_DOWNLOAD_STARTED,
-    });
-    dispatch(doHideModal());
-    dispatch(doOpenModal(MODALS.DOWNLOADING));
-    // @endif
-  };
-}
-
-export function doDownloadUpgradeRequested() {
-  // This means the user requested an upgrade by clicking the "upgrade" button in the navbar.
-  // If on Mac and Windows, we do some new behavior for the auto-update system.
-  // This will probably be reorganized once we get auto-update going on Linux and remove
-  // the old logic.
-
-  return dispatch => {
-    if (['win32', 'darwin'].includes(process.platform)) {
-      // electron-updater behavior
-      dispatch(doOpenModal(MODALS.AUTO_UPDATE_DOWNLOADED));
-    } else {
-      // Old behavior for Linux
-      dispatch(doDownloadUpgrade());
-    }
-  };
-}
-
 export function doClearUpgradeTimer() {
   return (dispatch, getState) => {
     const state = getState();
@@ -154,109 +69,6 @@ export function doClearUpgradeTimer() {
   };
 }
 
-export function doAutoUpdate() {
-  return dispatch => {
-    dispatch({
-      type: ACTIONS.AUTO_UPDATE_DOWNLOADED,
-    });
-
-    dispatch(doOpenModal(MODALS.AUTO_UPDATE_DOWNLOADED));
-
-    dispatch(doClearUpgradeTimer());
-  };
-}
-
-export function doAutoUpdateDeclined() {
-  return dispatch => {
-    dispatch(doClearUpgradeTimer());
-
-    dispatch({
-      type: ACTIONS.AUTO_UPDATE_DECLINED,
-    });
-  };
-}
-
-export function doCancelUpgrade() {
-  return (dispatch, getState) => {
-    const state = getState();
-    const upgradeDownloadItem = selectUpgradeDownloadItem(state);
-
-    if (upgradeDownloadItem) {
-      /*
-       * Right now the remote reference to the download item gets garbage collected as soon as the
-       * the download is over (maybe even earlier), so trying to cancel a finished download may
-       * throw an error.
-       */
-      try {
-        upgradeDownloadItem.cancel();
-      } catch (err) {
-        console.error(err); // eslint-disable-line no-console
-      }
-    }
-
-    dispatch({ type: ACTIONS.UPGRADE_CANCELLED });
-  };
-}
-
-export function doCheckUpgradeAvailable() {
-  return (dispatch, getState) => {
-    const state = getState();
-    dispatch({
-      type: ACTIONS.CHECK_UPGRADE_START,
-    });
-
-    if (['win32', 'darwin'].includes(process.platform)) {
-      // On Windows and Mac, updates happen silently through
-      // electron-updater.
-      const autoUpdateDeclined = selectAutoUpdateDeclined(state);
-
-      if (!autoUpdateDeclined && !isDev) {
-        autoUpdater.checkForUpdates();
-      }
-      return;
-    }
-
-    const success = ({ remoteVersion, upgradeAvailable }) => {
-      dispatch({
-        type: ACTIONS.CHECK_UPGRADE_SUCCESS,
-        data: {
-          upgradeAvailable,
-          remoteVersion,
-        },
-      });
-
-      if (
-        upgradeAvailable &&
-        !selectModal(state) &&
-        (!selectIsUpgradeSkipped(state) || remoteVersion !== selectRemoteVersion(state))
-      ) {
-        dispatch(doOpenModal(MODALS.UPGRADE));
-      }
-    };
-
-    const fail = () => {
-      dispatch({
-        type: ACTIONS.CHECK_UPGRADE_FAIL,
-      });
-    };
-
-    Native.getAppVersionInfo().then(success, fail);
-  };
-}
-
-/*
-  Initiate a timer that will check for an app upgrade every 10 minutes.
- */
-export function doCheckUpgradeSubscribe() {
-  return dispatch => {
-    const checkUpgradeTimer = setInterval(() => dispatch(doCheckUpgradeAvailable()), CHECK_UPGRADE_INTERVAL);
-    dispatch({
-      type: ACTIONS.CHECK_UPGRADE_SUBSCRIBE,
-      data: { checkUpgradeTimer },
-    });
-  };
-}
-
 export function doCheckDaemonVersion() {
   return dispatch => {
     // @if TARGET='app'
@@ -324,10 +136,6 @@ export function doDaemonReady() {
     dispatch(doBalanceSubscribe());
     dispatch(doFetchDaemonSettings());
     dispatch(doFetchFileInfosAndPublishedClaims());
-    if (!selectIsUpgradeSkipped(state)) {
-      dispatch(doCheckUpgradeAvailable());
-    }
-    dispatch(doCheckUpgradeSubscribe());
     // @endif
   };
 }
diff --git a/src/ui/redux/reducers/app.js b/src/ui/redux/reducers/app.js
index 5746fddd..524b1d91 100644
--- a/src/ui/redux/reducers/app.js
+++ b/src/ui/redux/reducers/app.js
@@ -119,11 +119,6 @@ reducers[ACTIONS.UPGRADE_CANCELLED] = state =>
     modal: null,
   });
 
-reducers[ACTIONS.AUTO_UPDATE_DOWNLOADED] = state =>
-  Object.assign({}, state, {
-    autoUpdateDownloaded: true,
-  });
-
 reducers[ACTIONS.AUTO_UPDATE_DECLINED] = state =>
   Object.assign({}, state, {
     autoUpdateDeclined: true,
diff --git a/src/ui/redux/selectors/app.js b/src/ui/redux/selectors/app.js
index 21048648..331a046c 100644
--- a/src/ui/redux/selectors/app.js
+++ b/src/ui/redux/selectors/app.js
@@ -65,11 +65,6 @@ export const selectDownloadComplete = createSelector(
   state => state.upgradeDownloadCompleted
 );
 
-export const selectIsUpgradeSkipped = createSelector(
-  selectState,
-  state => state.isUpgradeSkipped
-);
-
 export const selectUpgradeDownloadPath = createSelector(
   selectState,
   state => state.downloadPath
-- 
2.23.0

