From f033c87512754e37f1434a8d3e3e74e121ee9ce0 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <joshua@stroblindustries.com>
Date: Wed, 5 Jun 2019 15:57:28 +0300
Subject: [PATCH 1/1] Force x64 and strip out upgrade prompting.

---
 package.json                      |   5 +-
 src/ui/component/header/view.jsx  |  15 ---
 src/ui/component/splash/view.jsx  |   3 -
 src/ui/modal/modalRouter/view.jsx |   3 -
 src/ui/redux/actions/app.js       | 212 ------------------------------
 5 files changed, 3 insertions(+), 235 deletions(-)

diff --git a/package.json b/package.json
index c19c2f56..2b8eb4b1 100644
--- a/package.json
+++ b/package.json
@@ -30,14 +30,15 @@
     "run:web": "cross-env NODE_ENV=production yarn compile:web && node ./dist/web/server.js",
     "pack": "electron-builder --dir",
     "dist": "electron-builder",
-    "build": "cross-env NODE_ENV=production yarn compile:electron && electron-builder build",
+    "build": "cross-env NODE_ENV=production yarn compile:electron && electron-builder build--arch=x64",
     "build:dir": "yarn build -- --dir -c.compression=store -c.mac.identity=null",
+    "release": "yarn compile && electron-builder build",
     "lint": "eslint 'src/**/*.{js,jsx}' --fix && flow",
     "format": "prettier 'src/**/*.{js,jsx,scss,json}' --write",
     "flow-defs": "flow-typed install",
     "precommit": "lint-staged",
     "preinstall": "yarn cache clean lbry-redux && yarn cache clean lbryinc",
-    "postinstall": "electron-builder install-app-deps && node ./build/downloadDaemon.js"
+    "postinstall": "electron-builder install-app-deps --arch=x64 && node build/downloadDaemon.js"
   },
   "dependencies": {
     "electron-dl": "^1.11.0",
diff --git a/src/ui/component/header/view.jsx b/src/ui/component/header/view.jsx
index 4f8fa525..a33a6b64 100644
--- a/src/ui/component/header/view.jsx
+++ b/src/ui/component/header/view.jsx
@@ -31,8 +31,6 @@ const Header = (props: Props) => {
     isForwardDisabled,
   } = props;
 
-  const showUpgradeButton = autoUpdateDownloaded || (process.platform === 'linux' && isUpgradeAvailable);
-
   return (
     <header className="header">
       <div className="header__navigation">
@@ -95,19 +93,6 @@ const Header = (props: Props) => {
           label={isUpgradeAvailable ? '' : __('Publish')}
           navigate="/$/publish"
         />
-
-        {/* @if TARGET='app' */}
-
-        {showUpgradeButton && (
-          <Button
-            className="header__navigation-item header__navigation-item--right-action header__navigation-item--upgrade"
-            icon={ICONS.DOWNLOAD}
-            iconSize={24}
-            label={__('Upgrade App')}
-            onClick={downloadUpgradeRequested}
-          />
-        )}
-        {/* @endif */}
       </div>
     </header>
   );
diff --git a/src/ui/component/splash/view.jsx b/src/ui/component/splash/view.jsx
index 5615dde2..fc4b88b1 100644
--- a/src/ui/component/splash/view.jsx
+++ b/src/ui/component/splash/view.jsx
@@ -4,7 +4,6 @@ import * as MODALS from 'constants/modal_types';
 import { Lbry } from 'lbry-redux';
 import ModalWalletUnlock from 'modal/modalWalletUnlock';
 import ModalIncompatibleDaemon from 'modal/modalIncompatibleDaemon';
-import ModalUpgrade from 'modal/modalUpgrade';
 import ModalDownloading from 'modal/modalDownloading';
 import LoadScreen from './internal/load-screen';
 
@@ -196,8 +195,6 @@ export default class SplashScreen extends React.PureComponent<Props, State> {
         return <ModalIncompatibleDaemon onContinueAnyway={this.runWithIncompatibleDaemon} />;
       case MODALS.WALLET_UNLOCK:
         return <ModalWalletUnlock />;
-      case MODALS.UPGRADE:
-        return <ModalUpgrade />;
       case MODALS.DOWNLOADING:
         return <ModalDownloading />;
       default:
diff --git a/src/ui/modal/modalRouter/view.jsx b/src/ui/modal/modalRouter/view.jsx
index af910c61..b6d9f2b6 100644
--- a/src/ui/modal/modalRouter/view.jsx
+++ b/src/ui/modal/modalRouter/view.jsx
@@ -7,7 +7,6 @@ import ModalDownloading from 'modal/modalDownloading';
 import ModalAutoGenerateThumbnail from 'modal/modalAutoGenerateThumbnail';
 import ModalAutoUpdateDownloaded from 'modal/modalAutoUpdateDownloaded';
 import ModalAutoUpdateConfirm from 'modal/modalAutoUpdateConfirm';
-import ModalUpgrade from 'modal/modalUpgrade';
 import ModalWelcome from 'modal/modalWelcome';
 import ModalFirstReward from 'modal/modalFirstReward';
 import ModalRewardApprovalRequired from 'modal/modalRewardApprovalRequired';
@@ -48,8 +47,6 @@ function ModalRouter(props: Props) {
   const { id, modalProps } = modal;
 
   switch (id) {
-    case MODALS.UPGRADE:
-      return <ModalUpgrade {...modalProps} />;
     case MODALS.DOWNLOADING:
       return <ModalDownloading {...modalProps} />;
     case MODALS.AUTO_GENERATE_THUMBNAIL:
diff --git a/src/ui/redux/actions/app.js b/src/ui/redux/actions/app.js
index 4be100b6..b59f48f3 100644
--- a/src/ui/redux/actions/app.js
+++ b/src/ui/redux/actions/app.js
@@ -11,7 +11,6 @@ import Native from 'native';
 import { doFetchDaemonSettings } from 'redux/actions/settings';
 import { doCheckSubscriptionsInit } from 'redux/actions/subscriptions';
 import {
-  selectIsUpgradeSkipped,
   selectUpdateUrl,
   selectUpgradeDownloadItem,
   selectUpgradeDownloadPath,
@@ -31,8 +30,6 @@ const { download } = remote.require('electron-dl');
 const Fs = remote.require('fs');
 // @endif
 
-const CHECK_UPGRADE_INTERVAL = 10 * 60 * 1000;
-
 export function doOpenModal(id, modalProps = {}) {
   return {
     type: ACTIONS.SHOW_MODAL,
@@ -49,211 +46,6 @@ export function doHideModal() {
   };
 }
 
-export function doUpdateDownloadProgress(percent) {
-  return {
-    type: ACTIONS.UPGRADE_DOWNLOAD_PROGRESSED,
-    data: {
-      percent,
-    },
-  };
-}
-
-export function doSkipUpgrade() {
-  return {
-    type: ACTIONS.SKIP_UPGRADE,
-  };
-}
-
-export function doStartUpgrade() {
-  return (dispatch, getState) => {
-    const state = getState();
-    const upgradeDownloadPath = selectUpgradeDownloadPath(state);
-
-    ipcRenderer.send('upgrade', upgradeDownloadPath);
-  };
-}
-
-export function doDownloadUpgrade() {
-  return (dispatch, getState) => {
-    // @if TARGET='app'
-    const state = getState();
-    // Make a new directory within temp directory so the filename is guaranteed to be available
-    const dir = Fs.mkdtempSync(remote.app.getPath('temp') + path.sep);
-    const upgradeFilename = selectUpgradeFilename(state);
-
-    const options = {
-      onProgress: p => dispatch(doUpdateDownloadProgress(Math.round(p * 100))),
-      directory: dir,
-    };
-    download(remote.getCurrentWindow(), selectUpdateUrl(state), options).then(downloadItem => {
-      /**
-       * TODO: get the download path directly from the download object. It should just be
-       * downloadItem.getSavePath(), but the copy on the main process is being garbage collected
-       * too soon.
-       */
-
-      dispatch({
-        type: ACTIONS.UPGRADE_DOWNLOAD_COMPLETED,
-        data: {
-          downloadItem,
-          path: path.join(dir, upgradeFilename),
-        },
-      });
-    });
-
-    dispatch({
-      type: ACTIONS.UPGRADE_DOWNLOAD_STARTED,
-    });
-    dispatch(doHideModal());
-    dispatch(doOpenModal(MODALS.DOWNLOADING));
-    // @endif
-  };
-}
-
-export function doDownloadUpgradeRequested() {
-  // This means the user requested an upgrade by clicking the "upgrade" button in the navbar.
-  // If on Mac and Windows, we do some new behavior for the auto-update system.
-  // This will probably be reorganized once we get auto-update going on Linux and remove
-  // the old logic.
-
-  return (dispatch, getState) => {
-    const state = getState();
-
-    const autoUpdateDeclined = selectAutoUpdateDeclined(state);
-
-    if (['win32', 'darwin'].includes(process.platform)) {
-      // electron-updater behavior
-      if (autoUpdateDeclined) {
-        // The user declined an update before, so show the "confirm" dialog
-        dispatch(doOpenModal(MODALS.AUTO_UPDATE_CONFIRM));
-      } else {
-        // The user was never shown the original update dialog (e.g. because they were
-        // watching a video). So show the inital "update downloaded" dialog.
-        dispatch(doOpenModal(MODALS.AUTO_UPDATE_DOWNLOADED));
-      }
-    } else {
-      // Old behavior for Linux
-      dispatch(doDownloadUpgrade());
-    }
-  };
-}
-
-export function doClearUpgradeTimer() {
-  return (dispatch, getState) => {
-    const state = getState();
-
-    if (selectUpgradeTimer(state)) {
-      clearInterval(selectUpgradeTimer(state));
-      dispatch({
-        type: ACTIONS.CLEAR_UPGRADE_TIMER,
-      });
-    }
-  };
-}
-
-export function doAutoUpdate() {
-  return dispatch => {
-    dispatch({
-      type: ACTIONS.AUTO_UPDATE_DOWNLOADED,
-    });
-
-    dispatch(doOpenModal(MODALS.AUTO_UPDATE_DOWNLOADED));
-
-    dispatch(doClearUpgradeTimer());
-  };
-}
-
-export function doAutoUpdateDeclined() {
-  return dispatch => {
-    dispatch(doClearUpgradeTimer());
-
-    dispatch({
-      type: ACTIONS.AUTO_UPDATE_DECLINED,
-    });
-  };
-}
-
-export function doCancelUpgrade() {
-  return (dispatch, getState) => {
-    const state = getState();
-    const upgradeDownloadItem = selectUpgradeDownloadItem(state);
-
-    if (upgradeDownloadItem) {
-      /*
-       * Right now the remote reference to the download item gets garbage collected as soon as the
-       * the download is over (maybe even earlier), so trying to cancel a finished download may
-       * throw an error.
-       */
-      try {
-        upgradeDownloadItem.cancel();
-      } catch (err) {
-        console.error(err);
-      }
-    }
-
-    dispatch({ type: ACTIONS.UPGRADE_CANCELLED });
-  };
-}
-
-export function doCheckUpgradeAvailable() {
-  return (dispatch, getState) => {
-    const state = getState();
-    dispatch({
-      type: ACTIONS.CHECK_UPGRADE_START,
-    });
-
-    if (['win32', 'darwin'].includes(process.platform)) {
-      // On Windows and Mac, updates happen silently through
-      // electron-updater.
-      const autoUpdateDeclined = selectAutoUpdateDeclined(state);
-
-      if (!autoUpdateDeclined && !isDev) {
-        autoUpdater.checkForUpdates();
-      }
-      return;
-    }
-
-    const success = ({ remoteVersion, upgradeAvailable }) => {
-      dispatch({
-        type: ACTIONS.CHECK_UPGRADE_SUCCESS,
-        data: {
-          upgradeAvailable,
-          remoteVersion,
-        },
-      });
-
-      if (
-        upgradeAvailable &&
-        !selectModal(state) &&
-        (!selectIsUpgradeSkipped(state) || remoteVersion !== selectRemoteVersion(state))
-      ) {
-        dispatch(doOpenModal(MODALS.UPGRADE));
-      }
-    };
-
-    const fail = () => {
-      dispatch({
-        type: ACTIONS.CHECK_UPGRADE_FAIL,
-      });
-    };
-
-    Native.getAppVersionInfo().then(success, fail);
-  };
-}
-
-/*
-  Initiate a timer that will check for an app upgrade every 10 minutes.
- */
-export function doCheckUpgradeSubscribe() {
-  return dispatch => {
-    const checkUpgradeTimer = setInterval(() => dispatch(doCheckUpgradeAvailable()), CHECK_UPGRADE_INTERVAL);
-    dispatch({
-      type: ACTIONS.CHECK_UPGRADE_SUBSCRIBE,
-      data: { checkUpgradeTimer },
-    });
-  };
-}
-
 export function doCheckDaemonVersion() {
   return dispatch => {
     // @if TARGET='app'
@@ -316,10 +108,6 @@ export function doDaemonReady() {
     dispatch(doFetchDaemonSettings());
     dispatch(doBalanceSubscribe());
     dispatch(doFetchFileInfosAndPublishedClaims());
-    if (!selectIsUpgradeSkipped(state)) {
-      dispatch(doCheckUpgradeAvailable());
-    }
-    dispatch(doCheckUpgradeSubscribe());
     dispatch(doCheckSubscriptionsInit());
     // @endif
   };
-- 
2.21.0

